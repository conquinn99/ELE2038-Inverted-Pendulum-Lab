import sympy as sym

# Constants and System Variables

x1, x2, x3, x4, F, m, ell, g, M = sym.symbols('x1, x2, x3, x4, F, m, ell, g, M')

# Define phi

phi = (4 * m * ell * x4**2 * sym.sin(x3) + 4 * F - 3 * m * g * sym.sin(x3) \
       * sym.cos(x3))
phi /= 4 * (M + m) - 3 * m * sym.cos(x3)**2
phi

# Define psi

psi = -3 * (m * ell * x4**2 * sym.sin(x3) * sym.cos(x3) + F * sym.cos(x3) \
            - (M + m) * g * sym.sin(x3))
psi /= (4 * (M + m) - 3 * m * sym.cos(x3)**2) * ell
psi

# Determine the partial derivatives of phi
d_phi_F = phi.diff(F)
d_phi_x3 = phi.diff(x3)
d_phi_x4 = phi.diff(x4)

# Determine the partial derivatives of psi
d_psi_F = psi.diff(F)
d_psi_x3 = psi.diff(x3)
d_psi_x4 = psi.diff(x4)

# Simplify phi

d_phi_x3.simplify()

# Simplify psi

d_psi_x3.simplify()

# Finding the partial derivatives of phi

phi_eq = phi.subs([(F, 0), (x3, 0), (x4, 0)])
phi_eq

d_phi_F_eq = phi.diff(F).subs([(F, 0), (x3, 0), (x4, 0)])
d_phi_x4_eq = phi.subs([(F, 0), (x3, 0), (x4, 0)])
d_phi_F_eq

d_phi_x3_eq = phi.diff(x3).subs([(F, 0), (x3, 0), (x4, 0)])
d_phi_x3_eq

d_phi_x4_eq = phi.subs([(F, 0), (x3, 0), (x4, 0)])
d_phi_x4_eq

# Finding the partial derivatives of psi

psi_eq = psi.subs([(F, 0), (x3, 0), (x4, 0)])
psi_eq

d_psi_F_eq = psi.diff(F).subs([(F, 0), (x3, 0), (x4, 0)])
d_psi_x4_eq = psi.subs([(F, 0), (x3, 0), (x4, 0)])
d_psi_F_eq

d_psi_x3_eq = psi.diff(x3).subs([(F, 0), (x3, 0), (x4, 0)])
d_psi_x3_eq

d_psi_x4_eq = psi.subs([(F, 0), (x3, 0), (x4, 0)])
d_psi_x4_eq

# Impulse response for G_theta

a, b, c, d, t = sym.symbols('a, b, c, d, t', positive=True)
s = sym.symbols('s')
G = -c/(s**2 - d)
U = 1
X = G * U
x = sym.inverse_laplace_transform(X, s, t)
x

# Step response for G_theta

a, b, c, d, t = sym.symbols('a, b, c, d, t', positive=True)
s = sym.symbols('s')
G = -c/(s**2 - d)
U = 1/s
X = G * U
x = sym.inverse_laplace_transform(X, s, t)
x

# Frequency response for G_theta

a, b, c, d, t = sym.symbols('a, b, c, d, t', positive=True)
s = sym.symbols('s')
G = -c/(s**2 - d)
U = sym.sin(sym.symbols('\omega', positive=True))
X = G * U
x = sym.inverse_laplace_transform(X, s, t)
x

# Impulse response for G_x

a, b, c, d, t = sym.symbols('a, b, c, d, t', positive=True)
s = sym.symbols('s')
G = a/(s**2 + b)
U = 1
X = G * U
x = sym.inverse_laplace_transform(X, s, t)
x

# Step response for G_x

a, b, c, d, t = sym.symbols('a, b, c, d, t', positive=True)
s = sym.symbols('s')
G = a/(s**2 + b)
U = 1/s
X = G * U
x = sym.inverse_laplace_transform(X, s, t)
x

# Frequency response for G_x

a, b, c, d, t = sym.symbols('a, b, c, d, t', positive=True)
s = sym.symbols('s')
G = a/(s**2 + b)
U = sym.sin(sym.symbols('\omega', positive=True))
X = G * U
x = sym.inverse_laplace_transform(X, s, t)
x

# Setting the values from Q4

M = 0.3
m = 0.1
ell = 0.35
g = 9.81

c = 3 / ell / (4*M + m)
d = 3 * (M+m) * g / ell / (4*M + m)
print(c, d)

!pip install control

import control as ctrl
import matplotlib.pyplot as plt
import numpy as np
n_points = 500
t_final = 0.2

# Transfer Function

s = ctrl.TransferFunction.s
G = -c / (s**2 -d)
G

#Trajectory of theta(t)

ts = np.linspace(0, 0.1, 500)
us = 0.05 * ts**1.8 * np.cos(ts)

plt.plot(ts, us)
plt.grid()
plt.title('Trajectories of theta(t)')
plt.xlabel('time(seconds)')
plt.ylabel('theta(rad)')
plt.show()

#Trajectory of x(t)

resp = ctrl.forced_response(G, ts, us)
plt.plot(resp.time, resp.outputs)

plt.grid()
plt.title('Trajectories of x(t)')
plt.xlabel('time(seconds)')
plt.ylabel('x(t)')
plt.show()
