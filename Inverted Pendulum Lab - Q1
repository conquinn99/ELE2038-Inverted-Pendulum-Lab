import sympy as sym

# Constants and System Variables

x1, x2, x3, x4, F, m, ell, g, M = sym.symbols('x1, x2, x3, x4, F, m, ell, g, M')

# Define phi

phi = (4 * m * ell * x4**2 * sym.sin(x3) + 4 * F - 3 * m * g * sym.sin(x3) \
       * sym.cos(x3))
phi /= 4 * (M + m) - 3 * m * sym.cos(x3)**2
phi

# Define psi

psi = -3 * (m * ell * x4**2 * sym.sin(x3) * sym.cos(x3) + F * sym.cos(x3) \
            - (M + m) * g * sym.sin(x3))
psi /= (4 * (M + m) - 3 * m * sym.cos(x3)**2) * ell
psi

# Determine the partial derivatives of phi
d_phi_F = phi.diff(F)
d_phi_x3 = phi.diff(x3)
d_phi_x4 = phi.diff(x4)

# Determine the partial derivatives of psi
d_psi_F = psi.diff(F)
d_psi_x3 = psi.diff(x3)
d_psi_x4 = psi.diff(x4)

# Simplify phi

d_phi_x3.simplify()

# Simplify psi

d_psi_x3.simplify()

# Finding the partial derivatives of phi

phi_eq = phi.subs([(F, 0), (x3, 0), (x4, 0)])
phi_eq

d_phi_F_eq = phi.diff(F).subs([(F, 0), (x3, 0), (x4, 0)])
d_phi_x4_eq = phi.subs([(F, 0), (x3, 0), (x4, 0)])
d_phi_F_eq

d_phi_x3_eq = phi.diff(x3).subs([(F, 0), (x3, 0), (x4, 0)])
d_phi_x3_eq

d_phi_x4_eq = phi.subs([(F, 0), (x3, 0), (x4, 0)])
d_phi_x4_eq

# Finding the partial derivatives of psi

psi_eq = psi.subs([(F, 0), (x3, 0), (x4, 0)])
psi_eq

d_psi_F_eq = psi.diff(F).subs([(F, 0), (x3, 0), (x4, 0)])
d_psi_x4_eq = psi.subs([(F, 0), (x3, 0), (x4, 0)])
d_psi_F_eq

d_psi_x3_eq = psi.diff(x3).subs([(F, 0), (x3, 0), (x4, 0)])
d_psi_x3_eq

d_psi_x4_eq = psi.subs([(F, 0), (x3, 0), (x4, 0)])
d_psi_x4_eq
